from sre_parse import GLOBAL_FLAGS
import utils
from io import StringIO
import json

id_authors = {}
id_convs = {}
tags_dict = {}
domain_dict = {}
entity_dict = {}

conv_ref_cnt = 0
links_cnt = 0
annot_cnt = 0
hashtag_cnt = 0
conv_hash_cnt = 0
domain_cnt = 0
entity_cnt = 0
context_annot_cnt = 0


def create_authors_table(connection):
    with connection.cursor() as cursor:
        cursor.execute(
            """
            DROP TABLE IF EXISTS authors CASCADE;
            CREATE UNLOGGED TABLE authors (
                id                  BIGINT PRIMARY KEY,
                name                VARCHAR(255),
                username            VARCHAR(255),
                description         TEXT,
                followers_count     INTEGER,
                following_count     INTEGER,
                tweet_count         INTEGER,
                listed_count        INTEGER 
            );
            """
        )


def create_conversations_table(connection):
    with connection.cursor() as cursor:
        cursor.execute(
            """
            DROP TABLE IF EXISTS conversations CASCADE;
            CREATE UNLOGGED TABLE conversations (
                id                  BIGINT PRIMARY KEY,
                author_id           BIGINT REFERENCES authors(id),
                content             TEXT,
                possibly_sensitive  BOOLEAN,
                language            VARCHAR(3),
                source              TEXT,
                retweet_count       INTEGER,                
                reply_count         INTEGER,
                like_count          INTEGER,
                quote_count         INTEGER,
                created_at          TIMESTAMP WITH TIME ZONE
            );
            """
        )


def create_annotations_table(connection):
    with connection.cursor() as cursor:
        cursor.execute(
            """
            DROP TABLE IF EXISTS annotations CASCADE;
            CREATE UNLOGGED TABLE annotations (
                id                  BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                conversation_id     BIGINT REFERENCES conversations(id),
                value               TEXT,
                type                TEXT,
                probability         NUMERIC(4, 3)
            );
            """
        )


def create_links_table(connection):
    with connection.cursor() as cursor:
        cursor.execute(
            """
            DROP TABLE IF EXISTS links CASCADE;
            CREATE UNLOGGED TABLE links (
                id                  BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                conversation_id     BIGINT REFERENCES conversations(id),
                url                 VARCHAR(2048),
                title               TEXT,
                description         TEXT
            );
            """
        )


def create_conversations_references_table(connection):
    with connection.cursor() as cursor:
        cursor.execute(
            """
            DROP TABLE IF EXISTS conversation_references CASCADE;
            CREATE UNLOGGED TABLE conversation_references (
                id                  BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                conversation_id     BIGINT REFERENCES conversations(id),
                parent_id           BIGINT REFERENCES conversations(id),
                type                VARCHAR(20)
            );
            """
        )


def create_context_domains_table(connection):
    with connection.cursor() as cursor:
        cursor.execute(
            """
            DROP TABLE IF EXISTS context_domains CASCADE;
            CREATE UNLOGGED TABLE context_domains (
                id                  BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                name                VARCHAR(255),
                description         TEXT
            );
            """
        )


def create_context_entities_table(connection):
    with connection.cursor() as cursor:
        cursor.execute(
            """
            DROP TABLE IF EXISTS context_entities CASCADE;
            CREATE UNLOGGED TABLE context_entities (
                id                  BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                name                VARCHAR(255),
                description         TEXT
            );
            """
        )


def create_context_annotations_table(connection):
    with connection.cursor() as cursor:
        cursor.execute(
            """
            DROP TABLE IF EXISTS context_annotations CASCADE;
            CREATE UNLOGGED TABLE context_annotations (
                id                  BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                conversation_id     BIGINT REFERENCES conversations(id),
                context_domain_id   BIGINT REFERENCES context_domains(id),
                context_entity_id   BIGINT REFERENCES context_entities(id)
            );
            """
        )


def create_hashtags_table(connection):
    with connection.cursor() as cursor:
        cursor.execute(
            """
            DROP TABLE IF EXISTS hashtags CASCADE;
            CREATE UNLOGGED TABLE hashtags (
                id                  BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                tag                 TEXT,
                CONSTRAINT tag_constraint UNIQUE(tag)
            );
            """
        )


def create_conversation_hashtags_table(connection):
    with connection.cursor() as cursor:
        cursor.execute(
            """
            DROP TABLE IF EXISTS conversation_hashtags CASCADE;
            CREATE UNLOGGED TABLE conversation_hashtags (
                id                  BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                conversation_id     BIGINT REFERENCES conversations(id),
                hashtag_id          BIGINT REFERENCES hashtags(id)
            );
            """
        )


@utils.measure
def insert_authors_copy(connection, authors):
    with connection.cursor() as cursor:
        global id_authors
        csv_4_authors = StringIO()
        for author in authors:
            author = json.loads(author)
            if author["id"] in id_authors:
                continue

            csv_4_authors.write(
                "\t".join(
                    map(
                        utils.clean_4_csv,
                        (
                            author["id"],
                            author.get("name", None),
                            author.get("username", None),
                            author.get("description", None),
                            author["public_metrics"].get("followers_count", None),
                            author["public_metrics"].get("following_count", None),
                            author["public_metrics"].get("tweet_count", None),
                            author["public_metrics"].get("listed_count", None),
                        ),
                    )
                )
                + "\n"
            )
            id_authors.update({str(author["id"]): True})

        csv_4_authors.seek(0)
        cursor.copy_from(csv_4_authors, "authors", sep="\t")


@utils.measure
def insert_conversation_refs_copy(connection, tweets):
    with connection.cursor() as cursor:
        csv_4_convs_refs = StringIO()
        for tweet in tweets:
            tweet = json.loads(tweet)

            for ref in tweet.get("referenced_tweets", []):
                parent_id = ref["id"]

                if parent_id not in id_convs:
                    parent_id = None

                global conv_ref_cnt
                csv_4_convs_refs.write(
                    "\t".join(
                        map(
                            utils.clean_4_csv,
                            (conv_ref_cnt, tweet["id"], parent_id, ref["type"]),
                        )
                    )
                    + "\n"
                )
                conv_ref_cnt += 1

        csv_4_convs_refs.seek(0)
        cursor.copy_from(csv_4_convs_refs, "conversation_references", sep="\t")


@utils.measure
def insert_conversations_copy(connection, tweets):
    with connection.cursor() as cursor:
        global id_convs, id_authors, tags_dict, domain_dict, entity_dict

        csv_4_convs = StringIO()
        csv_4_annots = StringIO()
        csv_4_links = StringIO()
        csv_4_convs_htags = StringIO()
        csv_4_htags = StringIO()
        csv_4_cont_domains = StringIO()
        csv_4_cont_entities = StringIO()
        csv_4_cont_annots = StringIO()

        for tweet in tweets:
            tweet = json.loads(tweet)

            if tweet["id"] in id_convs:
                continue

            author_id = tweet["author_id"]
            if author_id not in id_authors:
                author_id = None

            csv_4_convs.write(
                "\t".join(
                    map(
                        utils.clean_4_csv,
                        (
                            tweet["id"],
                            author_id,
                            tweet["text"],
                            tweet["possibly_sensitive"],
                            tweet["lang"],
                            tweet["source"],
                            tweet["public_metrics"]["retweet_count"],
                            tweet["public_metrics"]["reply_count"],
                            tweet["public_metrics"]["like_count"],
                            tweet["public_metrics"]["quote_count"],
                            tweet["created_at"],
                        ),
                    )
                )
                + "\n"
            )
            id_convs.update({str(tweet["id"]): True})

            # annotation are under entities
            if "annotations" in tweet:
                for annot in tweet["entities"].get("annotations", []):
                    global annot_cnt
                    csv_4_annots.write(
                        "\t".join(
                            map(
                                utils.clean_4_csv,
                                (
                                    annot_cnt,
                                    tweet["id"],
                                    annot["normalized_text"],
                                    annot["type"],
                                    annot["probability"],
                                ),
                            )
                        )
                        + "\n"
                    )
                    annot_cnt += 1

            if "entities" in tweet:
                for url in tweet["entities"].get("urls", []):
                    global links_cnt
                    if len(url["expanded_url"]) > 2048:
                        continue
                    csv_4_links.write(
                        "\t".join(
                            map(
                                utils.clean_4_csv,
                                (
                                    links_cnt,
                                    tweet["id"],
                                    url["expanded_url"],
                                    url.get("title", None),
                                    url.get("description", None),
                                ),
                            )
                        )
                        + "\n"
                    )
                    links_cnt += 1

                for hashtag in tweet["entities"].get("hashtags", []):
                    global hashtag_cnt, conv_hash_cnt
                    if hashtag["tag"] not in tags_dict:
                        csv_4_htags.write(
                            "\t".join(
                                map(utils.clean_4_csv, (hashtag_cnt, hashtag["tag"]))
                            )
                            + "\n"
                        )
                        tags_dict.update({str(hashtag["tag"]): hashtag_cnt})
                        hashtag_cnt += 1

                    csv_4_convs_htags.write(
                        "\t".join(
                            map(
                                utils.clean_4_csv,
                                (
                                    conv_hash_cnt,
                                    tweet["id"],
                                    tags_dict[str(hashtag["tag"])],
                                ),
                            )
                        )
                        + "\n"
                    )
                    conv_hash_cnt += 1

                for item in tweet.get("context_annotations", []):
                    global domain_cnt, entity_cnt, context_annot_cnt

                    if (
                        str(item["domain"].get("name", ""))
                        + str(item["domain"].get("description", ""))
                        not in domain_dict
                    ):
                        csv_4_cont_domains.write(
                            "\t".join(
                                map(
                                    utils.clean_4_csv,
                                    (
                                        domain_cnt,
                                        item["domain"].get("name", None),
                                        item["domain"].get("description", None),
                                    ),
                                )
                            )
                            + "\n"
                        )
                        domain_dict.update(
                            {
                                str(item["domain"].get("name", ""))
                                + str(item["domain"].get("description", "")): domain_cnt
                            }
                        )
                        domain_cnt += 1

                    if (
                        str(item["entity"].get("name", ""))
                        + str(item["entity"].get("description", ""))
                        not in entity_dict
                    ):
                        csv_4_cont_entities.write(
                            "\t".join(
                                map(
                                    utils.clean_4_csv,
                                    (
                                        entity_cnt,
                                        item["entity"].get("name", None),
                                        item["entity"].get("description", None),
                                    ),
                                )
                            )
                            + "\n"
                        )
                        entity_dict.update(
                            {
                                str(item["entity"].get("name", ""))
                                + str(item["entity"].get("description", "")): entity_cnt
                            }
                        )
                        entity_cnt += 1

                    csv_4_cont_annots.write(
                        "\t".join(
                            map(
                                utils.clean_4_csv,
                                (
                                    context_annot_cnt,
                                    tweet["id"],
                                    domain_dict[
                                        str(item["domain"].get("name", ""))
                                        + str(item["domain"].get("description", ""))
                                    ],
                                    entity_dict[
                                        str(item["entity"].get("name", ""))
                                        + str(item["entity"].get("description", ""))
                                    ],
                                ),
                            )
                        )
                        + "\n"
                    )

                    context_annot_cnt += 1

        csv_4_convs.seek(0)
        csv_4_convs_htags.seek(0)
        csv_4_htags.seek(0)
        csv_4_annots.seek(0)
        csv_4_links.seek(0)
        csv_4_cont_domains.seek(0)
        csv_4_cont_entities.seek(0)
        csv_4_cont_annots.seek(0)

        cursor.copy_from(csv_4_convs, "conversations", sep="\t")
        cursor.copy_from(csv_4_htags, "hashtags", sep="\t")
        cursor.copy_from(csv_4_convs_htags, "conversation_hashtags", sep="\t")
        cursor.copy_from(csv_4_annots, "annotations", sep="\t")
        cursor.copy_from(csv_4_links, "links", sep="\t")
        cursor.copy_from(csv_4_cont_domains, "context_domains", sep="\t")
        cursor.copy_from(csv_4_cont_entities, "context_entities", sep="\t")
        cursor.copy_from(csv_4_cont_annots, "context_annotations", sep="\t")
